[gcode_macro CLEAN_NOZZLE]
gcode:
    SAVE_GCODE_STATE NAME=clean_nozzle_state
    _CG28   				# home if needed
    G90
    G1 Z10 F600
    G1 X268 F3000  			# move behind brush
    G1 Z6.5 F600     			# wipe height
    {% if printer.extruder.target >= 190 and (printer.extruder.target - printer.extruder.temperature)|abs <= 5 %}
        M83
        G1 E15 F250      	# purge @ 10mm^3/s
        G1 E-2 F1000     	# retract
        G4 P2000         	# wait 2s
        G92 E0
        {% for wipes in range(3) %}   # wipe 5 times
            G1 X234 F5000
            G1 X253 F5000
        {% endfor %}
        G1 X230 F5000
    {% endif %}
    RESTORE_GCODE_STATE NAME=clean_nozzle_state

[gcode_macro G29]				
gcode:
  G28
  BED_MESH_CALIBRATE
  G1 X0 Y0 Z10 F4200

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.

    G28                   # Full home (XYZ)
    G90                   # Absolut position
    G1 X2 F6000           # Move nozzle to position X 1
    G1 Y20                # Move nozzle to position Y 20
    G1 Z0.600 F600        # Move nozzle to position Z .6
    G1 Y2 F9000           # Move nozzle to position Y 0

    M400                  # Wait for movements to complete

    CLEAR_PAUSE

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info

    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info

    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}
  
  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  G90
  G1 X1 F6000
  G1 Y20
  G1 Z0.600 F600
  G1 Y0 F9000
  
  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150C"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info

  BED_MESH_CALIBRATE ADAPTIVE=1                # Starts bed mesh for printable area

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info

  SMART_PART

  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info

  LINE_PURGE

#[gcode_macro START_PRINT]
#gcode:
#    {% set BED_TEMP = params.BED_TEMP|default(62)|float %}
#    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
#    #G4 P{max(0, material_bed_temperature_layer_0[0] -10) * 12000}
#    G90 # Reset the G-Code Z offset (adjust Z offset if needed)
#    G92 E0 ; Reset Extruder
#    G28 ; Home all axes
    #M190 S{bedtemp}
#    Z_TILT_ADJUST
#    G28
#    BED_MESH_CALIBRATE ADAPTIVE=1
#    G1 Z2.0 F3000
#    G1 X1.0 Y20 Z0.75 F5000.0
#    G1 X1.0 Y250 Z0.75 F1500.0 E20
#    G1 X1.3 Y250 Z0.75 F5000.0
#    G1 X1.3 Y20 Z0.75 F1500.0 E45
#    G92 E0
#    G1 Z2.0 F3000.0

[gcode_macro END_PRINT]
gcode:
    G91 # Move nozzle away from print while retracting
    G1 Z5 E-10 F400     # Raise nozzle by 5mm andretract 10mm of filament 
    G90
    G1 X5 Y270 F3000 ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    M84 # Disable steppers

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 5.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 290.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 1.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode: